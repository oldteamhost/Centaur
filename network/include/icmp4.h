/*
 * NESCA 4
 * by oldteam & lomaster
 * license GPL-3.0
 *   Сделано от души 2023.
 * -----------------------------------------------------------
 * icmp4.h - It contains structures, constants and functions
 * for working with ICMP protocol. Obsolete message types and
 * really nerdy codes have been removed from here.
 * -----------------------------------------------------------
*/

#ifndef ICMP_4_H
#define ICMP_4_H

/* Support c++. */
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <sys/socket.h>
#include <stdio.h>
#include <arpa/inet.h>
#include <time.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include "ip4.h"

/* Compile opts */
#include "ncsockopt.h"

/* Destination Unreachable Message */
#define ICMP_DEST_UNREACH	3	/* Destination Unreachable*/
#define ICMP_NET_UNREACH	0	/* Network Unreachable*/
#define ICMP_HOST_UNREACH	1	/* Host Unreachable*/
#define ICMP_PROT_UNREACH	2	/* Protocol Unreachable*/
#define ICMP_PORT_UNREACH	3	/* Port Unreachable*/
#define ICMP_FRAG_NEEDED	4	/* Fragmentation Needed/DF set*/
#define ICMP_SR_FAILED		5	/* Source Route failed*/

/* Parameter Problem Message */
#define ICMP_PARAMETERPROB	12	/* Parameter Problem*/
#define ICMP_POINTINDIC_ER  0   /* Pointer indicates the error.*/

/* Time Exceeded Message */
#define ICMP_TIME_EXCEEDED	11	/* Time Exceeded*/
#define ICMP_EXC_TTL		0	/* TTL count exceeded*/
#define ICMP_EXC_FRAGTIME	1	/* Fragment Reass time exceeded	*/

/* Redirect Message */
#define ICMP_REDIRECT		5	/* Redirect (change route)*/
#define ICMP_REDIR_NET		0	/* Redirect Net*/
#define ICMP_REDIR_HOST		1	/* Redirect Host*/
#define ICMP_REDIR_NETTOS	2	/* Redirect Net for TOS*/
#define ICMP_REDIR_HOSTTOS	3	/* Redirect Host for TOS*/

/* Echo Message */
#define ICMP_ECHO		    8	/* Echo Request*/
#define ICMP_EXT_ECHO		42  /* Exceeded Echo*/
#define ICMP_ECHOREPLY		0	/* Echo Reply*/
#define ICMP_EXT_ECHOREPLY	43  /* Exceeded Echo Reply*/

/*Timestamp Message*/
#define ICMP_TIMESTAMP		13	/*Timestamp Request*/
#define ICMP_TIMESTAMPREPLY	14	/*Timestamp Reply*/

/*Information Message*/
#define ICMP_INFO_REQUEST	15	/*Information Request*/
#define ICMP_INFO_REPLY		16	/*Information Reply*/

/* Some of the fields have been cleaned up! */
struct icmp4_header
{
    uint8_t type;
    uint8_t code;
    uint16_t checksum;
    uint16_t ident;
    uint16_t seq;
#define MAGIC "hello"
#define MAGIC_LEN 5
    char magic[MAGIC_LEN];
};

/* Function for calculating checksum for ICMP packets. */
uint16_t checksum_16bit_icmp(unsigned char* data, int length);

/* Function to populate the ICMP header above. */
void fill_icmp_header(struct icmp4_header* icmp4_header, uint8_t type,
		uint8_t code, uint16_t checksum, uint16_t ident, uint16_t seq);


/* Function for ICMP protocol packet sending test, but can also be used to create
 * full-fledged programs. PS: Uses IP header generated by the system kernel. */
int 
send_icmp_packet(struct sockaddr_in* addr, int type,
				int code, int ident, int seq, int ttl);

/* Function for ICMP protocol packets reception test, but can also be used to create
 * full-fledged programs. Supports multithreaded programming.
 * This is done by sorting and discarding packets from wrong IPs. */
int 
recv_icmp_packet(const char* dest_ip, int timeout_ms, int type,
				int code);

/* An example of using the send and receive packet functions above, in the form of
 * creating an ICMP ping using 3 methods.
 * ICMP_ECHO, ICMP_INFO, ICMP_TIMESTAMP. */
double
icmp_ping(const char* dest_ip, int timeout_ms, int type, int code, int seq, int ttl);

/* Sources:
 * https://www.rfc-editor.org/rfc/rfc792
 * https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol
 * netinet/ip_icmp.h
*/

#ifdef __cplusplus
}
#endif

#endif
